package visao;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Currency;
import java.util.Locale;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import controle.PetProcess;
import modelo.Pet;

public class PetForm extends JFrame implements ActionListener {

	private static final long serialVersionUID = 1L;
	private JPanel painel;
	private JLabel id, fornecedor, produto, preco, rotulos, imagem;
	private JTextField tfId,tfFornecedor, tfproduto, tfpreco;

	private JScrollPane rolagem;
	private JTextArea verResultados;
	private JButton create, read, update, delete;
	private String imgIco = "./assets/icone.png";
	private ImageIcon icon;
	private int autoId = PetProcess.pets.size() + 1;
	private String texto = "";

	private final Locale BRASIL = new Locale("pt", "BR");
	private DecimalFormat df = new DecimalFormat("#.00");

	PetForm() {
		setTitle("Formulário de Pets");
		setBounds(100, 100, 800, 600);
		setIconImage(new ImageIcon(imgIco).getImage());
		painel = new JPanel();
		painel.setBackground(new Color(255, 233, 213));
		setContentPane(painel);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLayout(null);

		id = new JLabel("Id:");
		id.setBounds(20, 20, 120, 30);
		painel.add(id);
		fornecedor = new JLabel("Fornecedor:");
		fornecedor.setBounds(20, 55, 120, 30);
		painel.add(fornecedor);
		produto = new JLabel("Produto:");
		produto.setBounds(20, 90, 120, 30);
		painel.add(produto);
		preco = new JLabel("Preço:");
		preco.setBounds(20, 125, 120, 30);
		painel.add(preco);
		rotulos = new JLabel("Id | Fornecedor | Produto | Preço");
		rotulos.setBounds(20, 310, 500, 30);
		painel.add(rotulos);

		tfId = new JTextField(String.format("%d", autoId));
		tfId.setEditable(false);
		tfId.setBounds(140, 25, 140, 30);
		painel.add(tfId);
		tfFornecedor = new JTextField();
		tfFornecedor.setBounds(140, 60, 255, 30);
		painel.add(tfFornecedor);
		tfproduto = new JTextField();
		tfproduto.setBounds(140, 95, 255, 30);
		painel.add(tfproduto);
		tfpreco = new JTextField();
		tfpreco.setBounds(140, 130, 255, 30);
		painel.add(tfpreco);
		verResultados = new JTextArea();
		verResultados.setEditable(false);
		verResultados.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
		preencherAreaDeTexto();
		rolagem = new JScrollPane(verResultados);
		rolagem.setBounds(20, 340, 740, 200);
		painel.add(rolagem);
		imagem = new JLabel();
		imagem.setBounds(405, 60, 350, 240);
		imagem.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
		alternarImagens(0);
		painel.add(imagem);

		create = new JButton("Cadastrar");
		read = new JButton("Buscar");
		update = new JButton("Atualizar");
		delete = new JButton("Excluir");
		create.setBounds(285, 25, 110, 30);
		read.setBounds(405, 25, 110, 30);
		update.setBounds(525, 25, 110, 30);
		delete.setBounds(645, 25, 110, 30);
		update.setEnabled(false);
		delete.setEnabled(false);
		painel.add(create);
		painel.add(read);
		painel.add(update);
		painel.add(delete);

		// Ouvir os eventos dos Botões, ComboBox e outros
		tfFornecedor.addActionListener(this);
		create.addActionListener(this);
		read.addActionListener(this);
		update.addActionListener(this);
		delete.addActionListener(this);

	}

	private void alternarImagens(int indice) {
		icon = new ImageIcon(new ImageIcon(imagens[indice]).getImage().getScaledInstance(350, 240, 100));
		imagem.setIcon(icon);
	}

	// CREATE - CRUD
	private void cadastrar() {
		if (tfproduto.getText().length() != 0 && tfpreco.getText().length() != 0 && tfPeso.getText().length() != 0
				&& tfNascimento.getText().length() != 0 && tfNomeDono.getText().length() != 0
				&& tfTelefone.getText().length() != 0) {

			// Converter o peso no formato Brasileiro usando virgula como decimal
			df.setCurrency(Currency.getInstance(BRASIL));
			float peso;
			try {
				peso = Float.parseFloat(df.parse(tfPeso.getText()).toString());
			} catch (ParseException e) {
				System.out.println(e);
				peso = 0;
			}

			PetProcess.pets.add(new Pet(autoId, tfFornecedor.getText().toString(), tfproduto.getText(),
					tfpreco.getText(), peso, tfNascimento.getText(), tfNomeDono.getText(), tfTelefone.getText()));
			autoId++;
			preencherAreaDeTexto();
			limparCampos();
		} else {
			JOptionPane.showMessageDialog(this, "Favor preencher todos os campos.");
		}
	}

	private void limparCampos() {
		tfproduto.setText(null);
		tfpreco.setText(null);
		tfPeso.setText(null);
		tfNascimento.setText(null);
		tfNomeDono.setText(null);
		tfTelefone.setText(null);
	}

	private void preencherAreaDeTexto() {
		texto = ""; // Limpar a área de texto antes de preenher
		for (Pet p : PetProcess.pets) {
			texto += p.toString();
		}
		verResultados.setText(texto);
	}

	// Retornar índice da espécie
	int obterIndicefornecedor(String fornecedor) {
		switch (fornecedor) {
		case "Cachorro":
			return 0;
		case "Gato":
			return 1;
		case "Coelho":
			return 2;
		case "Outro":
			return 3;
		default:
			return -1;
		}
	}

	// READ - CRUD
	private void buscar() {
		String entrada = JOptionPane.showInputDialog(this,"Digite o Id do animal:");

		boolean isNumeric = true;
		if (entrada != null) {
			for (int i = 0; i < entrada.length(); i++) {
				if (!Character.isDigit(entrada.charAt(i))) {
					isNumeric = false;
				}
			}
		}else {
			isNumeric = false;
		}
		if (isNumeric) {
			int id = Integer.parseInt(entrada);
			Pet pet = new Pet(id);
			if (PetProcess.pets.contains(pet)) {
				int indice = PetProcess.pets.indexOf(pet);
				tfId.setText(PetProcess.pets.get(indice).getId("s"));
				tfFornecedor.setText(PetProcess.pets.get(indice).getorncedor());
				tfproduto.setText(PetProcess.pets.get(indice).getproduto());
				tfpreco.setText(PetProcess.pets.get(indice).getpreco());
				create.setEnabled(false);
				update.setEnabled(true);
				delete.setEnabled(true);
				PetProcess.salvar();
			} else {
				JOptionPane.showMessageDialog(this, "Pet não encontrado");
			}
		}

	}

	// UPDATE - CRUD
	private void alterar() {
		int id = Integer.parseInt(tfId.getText());
		Pet pet = new Pet(id);
		int indice = PetProcess.pets.indexOf(pet);
		if (tfproduto.getText().length() != 0 && tfpreco.getText().length() != 0 && tfPeso.getText().length() != 0
				&& tfNascimento.getText().length() != 0 && tfNomeDono.getText().length() != 0
				&& tfTelefone.getText().length() != 0) {

			// Converter o peso no formato Brasileiro usando virgula como decimal
			df.setCurrency(Currency.getInstance(BRASIL));
			float peso;
			try {
				peso = Float.parseFloat(df.parse(tfPeso.getText()).toString());
			} catch (ParseException e) {
				System.out.println(e);
				peso = 0;
			}

			PetProcess.pets.set(indice, new Produto(id, tfFornecedor.getText().toString(), tfproduto.getText(),
					tfpreco.getText())));
			preencherAreaDeTexto();
			limparCampos();
		} else {
			JOptionPane.showMessageDialog(this, "Favor preencher todos os campos.");
		}
		create.setEnabled(true);
		update.setEnabled(false);
		delete.setEnabled(false);
		tfId.setText(String.format("%d", autoId));
		PetProcess.salvar();
	}

	// DELETE - CRUD
	private void excluir() {
		int id = Integer.parseInt(tfId.getText());
		Pet pet = new Pet(id);
		int indice = PetProcess.pets.indexOf(pet);
		PetProcess.pets.remove(indice);
		preencherAreaDeTexto();
		limparCampos();
		create.setEnabled(true);
		update.setEnabled(false);
		delete.setEnabled(false);
		tfId.setText(String.format("%d", autoId));
		PetProcess.salvar();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == create) {
			cadastrar();
		}
		if (e.getSource() == read) {
			buscar();
		}
		if (e.getSource() == update) {
			alterar();
		}
		if (e.getSource() == delete) {
			excluir();
		}
	}

	public static void main(String[] agrs) throws ParseException {
		// PetProcess.carregarTestes();
		PetProcess.abrir();
		new PetForm().setVisible(true);
	}

}
